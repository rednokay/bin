# #!/bin/sh
#
# # This script will compile or run another finishing operation on a document. I
# # have this script run via vim.
#
# # Compiles .tex. groff (.mom, .ms), .rmd, .md, .org.  Opens .sent files as sent
# # presentations. Runs scripts based on extension or shebang.
#
# file="${1}"
# ext="${file##*.}"
# base="${file%.*}"
#
# dir=${dirname "$file"}
#
# cd "${dir}" || exit "1"
#
# case "${ext}" in
#     [0-9]) preconv "${file}" | refer -PS -e | groff -mandoc -T pdf > "${base}.pdf" ;;
#     mom|ms) preconv "${file}" | refer -PS -e | groff -T pdf -m"${ext}" > "${base}.pdf" ;;
#     c) cc "${file}" -o "${base}" && "./${base}" ;;
#     cob) cobc -x -o "$base" "$file" && "$base" ;;
#     cpp) g++ "${file}" -o "${base}" && "./${base}" ;;
#     cs) mcs "${file}" && mono "${base}.exe" ;;
#     go) go run "${file}" ;;
#     h) sudo make install ;;
#     java) javac -d classes "${file}" && java -cp classes "${base}" ;;
#     m) octave "${file}" ;;
#     md) [ -x "$(command -v lowdown)" ] && \
# 	    lowdown --parse-no-intraemph "${file}" -Tms | groff -mpdfmark -ms -kept -T pdf > "${base}.pdf" || \
# 	    [ -x "$(command -v groffdown)" ] && \
# 	    groffdown -i "${file}" | groff -T pdf > "${base}.pdf" || \ pandoc -t ms --highlight-style="kate" -s -o "${base}.pdf" "${file}" ;; org) emacs "${file}" --batch -u "${USER}" -f org-latex-export-to-pdf ;; py) python "${file}" ;;
#     rink) rink -f "${file}" ;;
#     [rR]md) Rscript -e "rmarkdown::render('${file}', quiet=TRUE)" ;;
#     rs) cargo build ;;
#     sass) sassc -a "${file}" "${base}.css" ;;
#     scad) openscad -o "${base}.stl" "${file}" ;;
#     sent) setsid -f sent "${file}" 2> "/dev/null" ;;
#     tex) latexmk ;;
#     *) sed -n '/^#!/s/^#!//p; q' "${file}" | xargs -r -I % "${file}" ;;
# esac
#!/bin/sh

# This script compiles or runs finishing operations on a document, invoked via vim.

file="$1"
ext="${file##*.}"
dir=$(dirname "$file")

cd "${dir}" || exit 1

case "${ext}" in
    [0-9]) preconv "${file}" | refer -PS -e | groff -mandoc -T pdf > "${base}.pdf" ;;
    mom|ms) preconv "${file}" | refer -PS -e | groff -T pdf -m"${ext}" > "${base}.pdf" ;;
    c) cc "${file}" -o "${base}" && "./${base}" ;;
    cob) cobc -x -o "$base" "$file" && "$base" ;;
    cpp) g++ "${file}" -o "${base}" && "./${base}" ;;
    cs) mcs "${file}" && mono "${base}.exe" ;;
    go) go run "${file}" ;;
    h) sudo make install ;;
    java) javac -d classes "${file}" && java -cp classes "${base}" ;;
    m) octave "${file}" ;;
    md) [ -x "$(command -v lowdown)" ] && \
        lowdown --parse-no-intraemph "${file}" -Tms | groff -mpdfmark -ms -kept -T pdf > "${base}.pdf" || \
        [ -x "$(command -v groffdown)" ] && \
        groffdown -i "${file}" | groff -T pdf > "${base}.pdf" || \
        pandoc -t ms --highlight-style="kate" -s -o "${base}.pdf" "${file}" ;;
    org) emacs "${file}" --batch -u "${USER}" -f org-latex-export-to-pdf ;;
    py) python "${file}" ;;
    rink) rink -f "${file}" ;;
    [rR]md) Rscript -e "rmarkdown::render('${file}', quiet=TRUE)" ;;
    rs) cargo build ;;
    sass) sassc -a "${file}" "${base}.css" ;;
    scad) openscad -o "${base}.stl" "${file}" ;;
    sent) setsid -f sent "${file}" 2> "/dev/null" ;;
    tex)
    	# Always compile main.tex
    	main_file="main.tex"
    	main_base="${main_file%.*}"

    	# Create an aux directory if it doesn’t exist
    	aux_dir="./aux"
    	mkdir -p "$aux_dir"

    	# Compile with pdflatex, outputting aux files to aux_dir
    	pdflatex -interaction=nonstopmode -output-directory="$aux_dir" "$main_file"
    	if [ -f "$aux_dir/${main_base}.aux" ]; then
    	    # Run bibtex directly on aux/main from root directory
    	    bibtex "$aux_dir/${main_base}"
    	    # Check BibTeX log for errors
    	    if [ -f "$aux_dir/${main_base}.blg" ]; then
    	        cat "$aux_dir/${main_base}.blg"
    	    fi
    	else
    	    echo "No aux file found at $aux_dir/${main_base}.aux, skipping BibTeX."
    	fi
    	if [ -f "$aux_dir/${main_base}.nlo" ]; then
    	    makeindex "$aux_dir/${main_base}.nlo" -s nomencl.ist -o "$aux_dir/${main_base}.nls"
    	fi
    	if [ -f "$aux_dir/${main_base}.glo" ]; then
    	    makeglossaries -d "$aux_dir" "$main_base"
    	fi
    	pdflatex -interaction=nonstopmode -output-directory="$aux_dir" "$main_file"  # Second run
    	pdflatex -interaction=nonstopmode -output-directory="$aux_dir" "$main_file"  # Third run for references

    	# Move the PDF to the main directory
    	mv "$aux_dir/${main_base}.pdf" ./

    	# Open or refresh MuPDF with main.pdf
    	if command -v mupdf >/dev/null 2>&1; then
    	    if pgrep -f "mupdf ${main_base}.pdf" >/dev/null; then
    	        pkill -HUP -f "mupdf ${main_base}.pdf"
    	    else
    	        mupdf "${main_base}.pdf" &
    	    fi
    	fi
    	;;
#    tex)
#    	# Always compile main.tex
#    	main_file="main.tex"
#    	main_base="${main_file%.*}"
#
#    	# Create an aux directory if it doesn’t exist
#    	aux_dir="./aux"
#    	mkdir -p "$aux_dir"
#
#    	# Compile with pdflatex, outputting aux files to aux_dir
#    	pdflatex -interaction=nonstopmode -output-directory="$aux_dir" "$main_file"
#    	if [ -f "$aux_dir/${main_base}.aux" ] && grep -q "\\citation" "$aux_dir/${main_base}.aux"; then
#    	    # Run bibtex with aux file in aux_dir, assuming .bib is in current dir
#    	    (cd "$aux_dir" && bibtex "${main_base}")
#    	fi
#    	if [ -f "$aux_dir/${main_base}.nlo" ]; then
#    	    makeindex "$aux_dir/${main_base}.nlo" -s nomencl.ist -o "$aux_dir/${main_base}.nls"
#    	fi
#    	if [ -f "$aux_dir/${main_base}.glo" ]; then
#    	    makeglossaries -d "$aux_dir" "$main_base"
#    	fi
#    	pdflatex -interaction=nonstopmode -output-directory="$aux_dir" "$main_file"  # Second run
#    	pdflatex -interaction=nonstopmode -output-directory="$aux_dir" "$main_file"  # Third run for references
#
#    	# Move the PDF to the main directory
#    	mv "$aux_dir/${main_base}.pdf" ./
#
#    	# Open or refresh MuPDF with main.pdf
#    	if command -v mupdf >/dev/null 2>&1; then
#    	    if pgrep -f "mupdf ${main_base}.pdf" >/dev/null; then
#    	        pkill -HUP -f "mupdf ${main_base}.pdf"
#    	    else
#    	        mupdf "${main_base}.pdf" &
#    	    fi
#    	fi
#    	;;
    *) sed -n '/^#!/s/^#!//p; q' "${file}" | xargs -r -I % "${file}" ;;
esac
